generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Payment {
  cash
  bank_transfer
  card
}


enum Media_Type {
  img
  vid
}

enum Role {
  admin
  owner
  manager
  worker
}

enum TransactionType {
  sold
  bought
  returned
}

enum Account_Status {
  active
  inActive
}

enum Boolean_Strings {
  true
  false
}

enum Header_type {
  none
  image
  text
  video
}

enum WP_Variable_Type {
  text
  currency
  date_time
}


enum Client_Property {
  client_fname
  client_lname
  client_area
  client_mobile_num
  points
  none
}


enum Log_Type {
  loggedIn
  loggedOut
  create
  read
  update
  delete
}

model User {
  id       String    @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  userName String    @unique
  password String
  fname String
  lname String
  role     Role
  account_status  Account_Status @default(active)
  created_at DateTime @default(now())
  modified_at DateTime @updatedAt

  logs Logs[]
}


model Client {
  client_id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  client_fname String
  client_lname String
  client_mobile_num String @unique
  client_area String
  subscribed Boolean_Strings @default(true)
  points Int @default(0)
  services Service_Sale_Record[]   
  products Product_Sale_Record[]
  created_at    DateTime @default(now())

}

model Employee {
  emp_id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  emp_fname String
  emp_lname String
  emp_mobile_num String @unique
  base_salary Int
  percentage  Int
  emp_status  Boolean @default(true)
  created_at    DateTime @default(now())
  records Employee_Record_JT[]
} 

model Service {
  serv_id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  serv_name String @unique
  serv_price Int
  serv_category String @db.Uuid
  created_at    DateTime @default(now())

  category   Category @relation(fields: [serv_category], references: [cat_id]) 
  deals Deal[] @relation("Services_In_Deals")
}

model Category{
  cat_id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  cat_name String @unique
  services Service[]
}

model Deal{
  deal_id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  deal_name String @unique
  deal_price Int  
  activate_from DateTime  
  activate_till DateTime?
  created_at    DateTime @default(now())
  modified_at   DateTime @updatedAt
  auto_generated Boolean @default(false)
  
  services Service[] @relation("Services_In_Deals")
  records Deal_ServiceSaleRecord_JT[] @relation("Deals_to_Record")
}

model Product {
  prod_id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  prod_name String @unique
  prod_price Int 
  quantity Int 
  created_at    DateTime @default(now())

  records Product_Record_JT[] 
}

model Vendor {
  vendor_id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  vendor_fname String
  vendor_lname String
  vendor_mobile_num String @unique
  created_at    DateTime @default(now())
  records Product_Sale_Record[]
}
model Service_Sale_Record {
  service_record_id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  total_amount Int 
  created_at DateTime @default(now())
  modified_at DateTime @updatedAt
  payment_cleared Boolean
  client_id String @db.Uuid
  
  deal_records Deal_ServiceSaleRecord_JT[] @relation("Record_to_Deals")
  employees Employee_Record_JT[]
  transactions Client_Transaction[]
  client Client @relation(fields: [client_id],references: [client_id])
}

model Deal_ServiceSaleRecord_JT {
  @@id([deal_id, record_id]) 

  deal_id String @db.Uuid
  record_id String @db.Uuid
  quantity Int  

  deal Deal @relation(fields: [deal_id], references: [deal_id], name: "Deals_to_Record")
  record Service_Sale_Record @relation(fields: [record_id], references: [service_record_id], name: "Record_to_Deals")
}

model Employee_Record_JT {
  @@id([emp_id, record_id]) 
  record_id String @db.Uuid
  emp_id String @db.Uuid
  work_share Int

  record  Service_Sale_Record @relation(fields: [record_id],references: [service_record_id])
  employee Employee @relation(fields: [emp_id], references: [emp_id])

}

model Client_Transaction {
  client_transaction_id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  record_id String @db.Uuid
  amount_paid Int
  mode_of_payment Payment 
  created_at DateTime @default(now())
  modified_at DateTime @updatedAt

  record Service_Sale_Record @relation(fields: [record_id],references: [service_record_id])
}

model Product_Sale_Record {
  product_record_id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  client_id String? @db.Uuid
  vendor_id String? @db.Uuid
  transaction_type  TransactionType 
  payment_cleared Boolean
  total_amount Int
  created_at DateTime @default(now())
  modified_at DateTime @updatedAt

  client Client? @relation(fields: [client_id], references: [client_id])
  vendor Vendor? @relation(fields: [vendor_id], references: [vendor_id])
  products Product_Record_JT[]
  transactions Product_Transaction[]
}

model Product_Record_JT {
  record_id String @db.Uuid
  prod_id String @db.Uuid
  quantity Int 

  record Product_Sale_Record @relation(fields: [record_id], references: [product_record_id])
  product Product @relation(fields: [prod_id], references: [prod_id])
  @@id([record_id,prod_id])

}

model Product_Transaction {
  product_trans_id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  record_id String @db.Uuid
  amount_paid Int
  mode_of_payment Payment 
  created_at DateTime @default(now())
  modified_at DateTime @updatedAt

  record Product_Sale_Record @relation(fields: [record_id], references: [product_record_id])
}

model Operational_Expenses {
  expense_id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  amount_paid Int
  description String
  created_at DateTime @default(now())
  modified_at DateTime @updatedAt
}


model Template {
  id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  name String @unique
  header_type Header_type
  header_var_name String?
  created_at DateTime @default(now())
  modified_at DateTime @updatedAt

  variables Template_Variable[]
}


model Template_Variable {
  id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  name String
  type WP_Variable_Type
  template_id String @db.Uuid
  client_property Client_Property @default(none)
  template Template @relation(fields: [template_id], references: [id])
}


model Media{
  id String @id
  name String @unique
  type Media_Type 
  created_at DateTime @default(now())
}

model Mobile_number_record{
  mobile_number String @id 
  subscribed Boolean_Strings @default(true)
  created_at DateTime @default(now())
}


//model for logging information
model Logs {
  id String @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  userId String @db.Uuid
  log_type Log_Type
  log_message String
  created_at DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}



